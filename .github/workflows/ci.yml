name: CI

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read
  security-events: write

env:
  SNYK_ORG: ${{ secrets.SNYK_ORG }}

jobs:
  build_and_test:
    name: Build, Lint & Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install all dependencies
        run: npm install

      - name: Run linting for all projects
        run: npm run lint

      - name: Sanity-check Snyk secrets
        run: |
          [ -n "$SNYK_TOKEN" ] || (echo "SNYK_TOKEN vacío"; exit 1)
          if [ -z "$SNYK_ORG" ]; then
            echo "SNYK_ORG no definido; se usará la organización por defecto del usuario."
          else
            echo "SNYK_ORG definido."
          fi
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SNYK_ORG: ${{ secrets.SNYK_ORG }}

      # ✅ Acción oficial de Snyk para Node (no la cli-action vieja)
      - name: Run Snyk to check for vulnerabilities
        id: snyk_test
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SNYK_ORG: ${{ secrets.SNYK_ORG }}
        with:
          command: test
          args: >
            ${{ env.SNYK_ORG != '' && format('--org={0}', env.SNYK_ORG) || '' }}
            --all-projects
            --severity-threshold=high
            --sarif-file-output=snyk.sarif

      - name: Debug SARIF presence
        if: always()
        run: |
          ls -la
          test -f snyk.sarif && echo "SARIF generado" || echo "SARIF NO generado"

      - name: Upload Snyk report to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ always() && hashFiles('snyk.sarif') != '' }}
        with:
          sarif_file: snyk.sarif

      - name: Fail build if Snyk found issues
        if: >
          steps.snyk_test.outcome == 'failure' &&
          github.event_name == 'push' &&
          github.ref == 'refs/heads/main' &&
          hashFiles('snyk.sarif') != ''
        run: exit 1

      - name: SonarCloud Scan (backend)
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          projectBaseDir: backend

      - name: SonarCloud Scan (frontend)
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          projectBaseDir: frontend

  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend image
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}

      - name: Extract metadata for frontend image
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/frontend
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
